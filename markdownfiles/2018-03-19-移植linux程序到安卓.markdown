## 移植linux程序到安卓

### 1.简介

传统的linux系统中的程序基本都依赖于glibc，而安卓的程序基本都是依赖于Bionic（由谷歌公司开发类库，用来替代glibc）。这就决定了要想移植linux上的程序到android上就必须解决这个依赖的类库不同的问题。

一般情况下，有两种方法。

##### 静态编译

一个就是将程序静态编译，将程序中所有需要的库全部编译进可执行文件中。这样程序在android中运行就不需要链接任何动态库了。但是带来一个非常大的弊端就是这个程序会非常大，资源利用会非常低下。一个简单的helloWorld！都可以达到好几百k！

 ##### 动态编译

另一个就是用ld-llinux.so.3来替代android系统中/system/bin/linker来作为链接器进行动态链接，並將需要鏈接的動態庫放到安卓的對應目錄。这样就可以进行动态链接，并且正常运行了。


交叉編譯工具鏈下載地址
https://releases.linaro.org/components/toolchain/binaries/

### 2.静态编译

静态编译時，對於需要支持c++11，且使用pthread 某些特性的程序需要添加一些編譯參數
測試程序：

```
#include <iostream>       // std::cout
#include <functional>     // std::ref
#include <thread>         // std::thread
#include <future>         // std::promise, std::future
#include <ifaddrs.h>

void print_int(std::future<int>& fut) {
    int x = fut.get(); // 获取共享状态的值.
    std::cout << "value: " << x << '\n'; // 打印 value: 10.
}

int main ()
{
    std::promise<int> prom; // 生成一个 std::promise<int> 对象.
    std::future<int> fut = prom.get_future(); // 和 future 关联.
    std::thread t(print_int, std::ref(fut)); // 将 future 交给另外一个线程t.
    prom.set_value(10); // 设置共享状态的值, 此处和线程t保持同步.
    t.join();

    return 0;
}
```

在ubuntu　pc 環境下動態編譯則能正常執行，　但是靜態編譯正常，執行出現段錯誤。

```
$ g++ d.cpp -o d.out -std=c++11 -lpthread -static
$ ./d.out 
Segmentation fault (core dumped)
```

添加參數-Wl,--whole-archive -lpthread -Wl,--no-whole-archive　後　静态编译能夠正常執行

```
$ g++ d.cpp -o d.out -std=c++11 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -static
$ ./d.out 
value: 10
```

注意：交叉編譯　静态编译如果不添加-Wl,--whole-archive -lpthread -Wl,--no-whole-archive　參數則出現錯誤

代码使用std::thread，使用-static -lpthread静态编译后，运行段错误的问题？
https://www.zhihu.com/question/263630790/answer/271262912

```
$ ../bin/arm-linux-gnueabihf-g++ d.cpp -o d.out -std=c++11 -lpthread -static
$ adb push d.out /system/bin
11381 KB/s (1268895 bytes in 0.108s)
$ adb shell

root@zipp_mini:/ # d.out                                                       
terminate called after throwing an instance of 'std::system_error'
what():  Enable multithreading to use std::thread: Operation not permitted
Aborted 
```

交叉編譯添加上述參數之後執行正常。

```
$ ../bin/arm-linux-gnueabihf-g++ d.cpp -o d.out -std=c++11 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -static
$ adb push d.out /system/bin
11361 KB/s (1374001 bytes in 0.118s)
$ adb shell
root@zipp_mini:/ # d.out                                                       
value: 10
```

### 3.动态编译

針對上述測試程序，進行動態編譯需要添加參數　指定鏈接器　和　庫的路徑。（使用g++ 4.8 版本動態編譯的程序在執行的時候報錯有接口在libstdc++.so.6中找不到，所以更改使用g++ 5.4版本， 下載地址參考資料3  [交叉編譯工具鏈下載地址](https://releases.linaro.org/components/toolchain/binaries/)）

通過find 命令查找工具鏈下的鏈接器

```
$ find . -name ld-linux*
./arm-linux-gnueabihf/libc/lib/ld-linux-armhf.so.3
```

指定使用工具鏈下的連接器（其中/system/lib/gnulib 爲板子上的路徑，mkdir 目錄 gunlib，並在編譯時指定在該路徑下查找連接器和動態庫）

```
$ ../bin/arm-linux-gnueabihf-g++ d.cpp -o d.out  -Wl,-dynamic-linker=/system/lib/gnulib/ld-linux-armhf.so.3 -Wl,-rpath,/system/lib/gnulib -std=c++11 -lpthread
```

通過readelf -d d.out查看使用的動態庫

```
$ readelf -d d.out
Dynamic section at offset 0x6110 contains 29 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libpthread.so.0]
 0x00000001 (NEEDED)                     Shared library: [libstdc++.so.6]
 0x00000001 (NEEDED)                     Shared library: [libm.so.6]
 0x00000001 (NEEDED)                     Shared library: [libgcc_s.so.1]
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000f (RPATH)                      Library rpath: [/system/lib/gnulib]
 0x0000000c (INIT)                       0x11280
 0x0000000d (FINI)                       0x15568
 0x00000019 (INIT_ARRAY)                 0x26100
 0x0000001b (INIT_ARRAYSZ)               8 (bytes)
 0x0000001a (FINI_ARRAY)                 0x26108
 0x0000001c (FINI_ARRAYSZ)               4 (bytes)
 0x00000004 (HASH)                       0x101a0
 0x00000005 (STRTAB)                     0x10714
 0x00000006 (SYMTAB)                     0x10334
 0x0000000a (STRSZ)                      2103 (bytes)
 0x0000000b (SYMENT)                     16 (bytes)
 0x00000015 (DEBUG)                      0x0
 0x00000003 (PLTGOT)                     0x26220
 0x00000002 (PLTRELSZ)                   384 (bytes)
 0x00000014 (PLTREL)                     REL
 0x00000017 (JMPREL)                     0x11100
 0x00000011 (REL)                        0x110b8
 0x00000012 (RELSZ)                      72 (bytes)
 0x00000013 (RELENT)                     8 (bytes)
 0x6ffffffe (VERNEED)                    0x10fc8
 0x6fffffff (VERNEEDNUM)                 4
 0x6ffffff0 (VERSYM)                     0x10f4c
 0x00000000 (NULL)                       0x0
```

创建push.sh,將動態庫放入到板子上，並且chmod 755 ld-linux-armhf.so.3 否則報錯沒有權限。

```
$ cat push.sh 
adb push ./arm-linux-gnueabihf/libc/lib/libpthread.so.0 /system/lib/gnulib
adb push ./arm-linux-gnueabihf/libc/lib/libstdc++.so.6 /system/lib/gnulib
adb push ./arm-linux-gnueabihf/libc/lib/libm.so.6 /system/lib/gnulib
adb push ./arm-linux-gnueabihf/libc/lib/libgcc_s.so.1 /system/lib/gnulib
adb push ./arm-linux-gnueabihf/libc/lib/libc.so.6 /system/lib/gnulib
adb push ./arm-linux-gnueabihf/libc/lib/ld-linux-armhf.so.3 /system/lib/gnulib
$ ./push.sh
```

執行成功

```
$ adb push d.out /system/bin
7570 KB/s (127212 bytes in 0.016s)
$ adb shell
root@zipp_mini:/ # d.out                                                       
value: 10
```

### 參考資料

1. linux程序移植到android上
http://blog.51cto.com/thedevilking/1364547

2. 代码使用std::thread，使用-static -lpthread静态编译后，运行段错误的问题？
https://www.zhihu.com/question/263630790/answer/271262912

3. 交叉編譯工具鏈下載地址
https://releases.linaro.org/components/toolchain/binaries/




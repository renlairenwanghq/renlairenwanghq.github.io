## GoogleMock最简单的例子

### 1.简介

googlemock是google公司还为c++开发一个mock框架。注意不要和gmock混淆，gmock是google公司为Groovy语言开发的mock框架。

gmock1.7.0中使用了C++11新标准，所以我们的编译器需要支持C++11才行，在Linux系统中，即需要安装GCC4.7/G++4.7。（本来是想在安卓的原生开发过程中使用gmock，但是貌似由于编译器的版本问题，导致不能只用。）

本篇只是记录一下操作过程中的错误，详细内容参考文章最后的参考链接，介绍的很详细。

### 2.下载

googlemock和googletest在同一个代码仓库中，其下载地址为:

https://github.com/google/googletest.git

下载代码

```
$ git clone https://github.com/google/googletest.git
$ cd googletest
$ cd ci
$ ./build-linux-autotools.sh
```

生成的文件会在 googlemock/build目录下。

```
milo@milo-OptiPlex-7040:~/googletest/build$ ls -ll
total 68
-rw-rw-r-- 1 milo milo  6192 Mar 23 13:57 config.log
-rwxrwxr-x 1 milo milo 25464 Mar 23 13:57 config.status
drwxrwxr-x 9 milo milo  4096 Mar 23 15:21 googlemock
drwxrwxr-x 9 milo milo  4096 Mar 23 13:57 googletest
-rw-rw-r-- 1 milo milo 24398 Mar 23 13:57 Makefile
```

生成的库文件在lib/.libs目录下

```
~/googletest/build/googlemock/lib$ ls -a
.  ..  .dirstamp  libgmock.la  libgmock_main.la  .libs
~/googletest/build/googlemock/lib/.libs$ ls -ll
total 3340
-rw-rw-r-- 1 milo milo 2233020 Mar 23 13:57 libgmock.a
lrwxrwxrwx 1 milo milo      14 Mar 23 13:57 libgmock.la -> ../libgmock.la
-rw-rw-r-- 1 milo milo     949 Mar 23 13:57 libgmock.lai
-rw-rw-r-- 1 milo milo   46606 Mar 23 13:57 libgmock_main.a
lrwxrwxrwx 1 milo milo      19 Mar 23 13:57 libgmock_main.la -> ../libgmock_main.la
-rw-rw-r-- 1 milo milo    1011 Mar 23 13:57 libgmock_main.lai
lrwxrwxrwx 1 milo milo      22 Mar 23 13:57 libgmock_main.so -> libgmock_main.so.0.0.0
lrwxrwxrwx 1 milo milo      22 Mar 23 13:57 libgmock_main.so.0 -> libgmock_main.so.0.0.0
-rwxrwxr-x 1 milo milo   34888 Mar 23 13:57 libgmock_main.so.0.0.0
lrwxrwxrwx 1 milo milo      17 Mar 23 13:57 libgmock.so -> libgmock.so.0.0.0
lrwxrwxrwx 1 milo milo      17 Mar 23 13:57 libgmock.so.0 -> libgmock.so.0.0.0
-rwxrwxr-x 1 milo milo 1088936 Mar 23 13:57 libgmock.so.0.0.0


~/googletest/build/googletest/lib$ ls -a
.  ..  .dirstamp  libgtest.la  libgtest_main.la  .libs
```



### 3.测试

**FooInterface.h**

```
#ifndef FOOINTERFACE_H_
#define FOOINTERFACE_H_
#include <string>
namespace seamless {

class FooInterface {
public:
virtual ~FooInterface() {}

public:
virtual std::string getArbitraryString() = 0;
};

}  // namespace seamless

#endif // FOOINTERFACE_H_
```

**MockFoo.h**

```
#ifndef MOCKFOO_H_
#define MOCKFOO_H_

#include <gmock/gmock.h>
#include <string>
#include "FooInterface.h"

namespace seamless {

class MockFoo: public FooInterface {
public:
MOCK_METHOD0(getArbitraryString, std::string());
};

}  // namespace seamless

#endif // MOCKFOO_H_
```

**FooMain.cc**

```
#include <cstdlib>
#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include <iostream>
#include <string>

#include "MockFoo.h"

using namespace seamless;
using namespace std;

using ::testing::Return;

int main(int argc, char** argv) {
::testing::InitGoogleMock(&argc, argv);

string value = "Hello World!";
MockFoo mockFoo;
EXPECT_CALL(mockFoo, getArbitraryString()).Times(1).
WillOnce(Return(value));
string returnValue = mockFoo.getArbitraryString();
cout << "Returned Value: " << returnValue << endl;

return EXIT_SUCCESS;
}
```

**编译** 

因为不想导入动态库所以选择静态编译，但是存在一个warining。

```
$ g++ FooMain.cpp -I./include -L../lib/.libs -L../../googletest/lib/.libs -static  -lgmock -lgtest -lpthread 
../../googletest/lib/.libs/libgtest.a(gtest-all.o): In function `testing::internal::StreamingListener::SocketWriter::MakeConnection()':
/home/milo/googletest/build/googletest/../../googletest/src/gtest.cc:4209: warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
```

**执行**

```
$ ./a.out 
Segmentation fault (core dumped)
```

**第二次编译**

参考链接 https://www.cnblogs.com/chengxuyuancc/archive/2013/05/11/3072981.html修改编译的参数。

采用一部分静态连接，一部分动态连接的方式：-Wl,-dn后面是静态链接-Wl,-dy后面是动态连接

```
$ g++ FooMain.cpp -I./include -L../lib/.libs -L../../googletest/lib/.libs -Wl,-dn  -lgmock -lgtest -Wl,-dy -lpthread
```

**执行成功**

```
$ ./a.out 
Returned Value: Hello World!
```

**交叉编译**

记录一下交叉编译的设置

```
$ ./configure --host=arm-linux-androideabi
$ make
```



### 参考链接

[[C++ Programming with TDD之一：GMOCK框架简介](http://www.cnblogs.com/berlin-sun/p/gmock.html)](https://www.cnblogs.com/berlin-sun/p/gmock.html)

[转一篇小亮同学的google mock分享](http://www.cnblogs.com/welkinwalker/archive/2011/11/29/2267225.html)